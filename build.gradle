plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
    id 'xyz.jpenilla.run-velocity' version '2.3.1'
}

group = 'org.zeroBzeroT'
version = "${project.plugin_version}"

repositories {
    mavenCentral()
    maven {
        url = 'https://repo.papermc.io/repository/maven-public/'
        content {
            includeGroup 'com.velocitypowered'
        }
    }
}

dependencies {
    compileOnly group: 'com.velocitypowered', name: 'velocity-api', version: "${project.velocity_api_version}"
    annotationProcessor group: 'com.velocitypowered', name: 'velocity-api', version: "${project.velocity_api_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}
tasks.withType(JavaCompile).configureEach {
    it.sourceCompatibility = it.targetCompatibility = JavaVersion.toVersion(21)
    it.options.release = 21
    it.options.encoding = 'UTF-8'
}

// template file for compile-time value injection
def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props
    task.from templateSource
    task.into templateDest
    task.expand props
}
sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

// put jar artifact in build/dist/
jar.destinationDirectory.set(layout.buildDirectory.dir('dist'))

// test setup
runPaper.disablePluginJarDetection()
tasks {
    runVelocity {
        runDirectory = layout.projectDirectory.dir('run').dir('proxy')
        velocityVersion("${project.velocity_api_version}")
        dependsOn('build')
    }
}

tasks.register('runServerMain', runServer.getClass()) {
    minecraftVersion("${project.minecraft_version}")
    systemProperty('com.mojang.eula.agree', 'true')
    systemProperty('Paper.skipServerPropertiesComments', 'true')
    runDirectory = layout.projectDirectory.dir('run').dir('main')
    dependsOn('build')
}

tasks.register('runServerQueue', runServer.getClass()) {
    minecraftVersion("${project.minecraft_version}")
    systemProperty('com.mojang.eula.agree', 'true')
    systemProperty('Paper.skipServerPropertiesComments', 'true')
    runDirectory = layout.projectDirectory.dir('run').dir('queue')
    downloadPlugins {
        github("zeroBzeroT", "QueueServerPlugin", "3.0.0-SNAPSHOT", "queueplugin-3.0.0-SNAPSHOT+1.20.6-paper.jar")
        url("https://ci.dmulloy2.net/job/ProtocolLib/723/artifact/build/libs/ProtocolLib.jar")
    }
    dependsOn('build')
}

// eclipse + intellij hooks for generating template files
project.eclipse.synchronizationTasks(generateTemplates)
rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
